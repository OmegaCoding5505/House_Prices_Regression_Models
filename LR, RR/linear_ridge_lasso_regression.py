# -*- coding: utf-8 -*-
"""sml_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kZselp7T2IkBYACbObRNxj3loff_Qrb0
"""

# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_squared_error
from sklearn.datasets import fetch_openml
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import r2_score

url = "https://raw.githubusercontent.com/pariyaab/House_Prices_Regression_Models/master/Data/Processed_Data/new_numerical_data.csv"
data = pd.read_csv(url, encoding="unicode_escape")

X = data.drop('SalePrice', axis = 1)
y = data['SalePrice']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Linear Regression
#linear_params = {'normalize': [True, False]}
#linear_params = {'alpha': [0.1, 1, 10]}
#linear_model = LinearRegression()
#linear_grid = GridSearchCV(linear_model, linear_params, cv=5)
#linear_grid.fit(X_train_scaled, y_train)
#linear_params = {'normalize': [True, False]}
linear_model = LinearRegression()
#linear_grid = GridSearchCV(linear_model, linear_params, cv=5)
linear_model.fit(X_train_scaled, y_train)

# Ridge Regression with hyperparameter tuning
ridge_params = {'alpha': [0.1, 1, 10]}
ridge_model = Ridge()
ridge_grid = GridSearchCV(ridge_model, ridge_params, cv=5)
ridge_grid.fit(X_train_scaled, y_train)

# Lasso Regression with hyperparameter tuning
lasso_params = {'alpha': [0.1, 1, 10]}
lasso_model = Lasso()
lasso_grid = GridSearchCV(lasso_model, lasso_params, cv=5)
lasso_grid.fit(X_train_scaled, y_train)

# Evaluate models
linear_pred = linear_model.predict(X_test_scaled)
ridge_pred = ridge_grid.predict(X_test_scaled)
lasso_pred = lasso_grid.predict(X_test_scaled)

linear_mse = mean_squared_error(y_test, linear_pred)
ridge_mse = mean_squared_error(y_test, ridge_pred)
lasso_mse = mean_squared_error(y_test, lasso_pred)

# Linear Regression

linear_r2 = r2_score(y_test, linear_pred)

print("Linear Regression R-squared:", linear_r2)

# Ridge Regression

ridge_r2 = r2_score(y_test, ridge_pred)

# Ridge Regression
lasso_r2 = r2_score(y_test,lasso_pred)
print("Ridge Regression R-squared:", ridge_r2)
print("Lasso Regression R-squared:", lasso_r2)
print("Linear Regression MSE:", linear_mse)
print("Ridge Regression MSE:", ridge_mse)
print("Lasso Regression MSE:", lasso_mse)

# Best hyperparameters for Ridge and Lasso
print("Best Ridge Hyperparameters:", ridge_grid.best_params_)
print("Best Lasso Hyperparameters:", lasso_grid.best_params_)